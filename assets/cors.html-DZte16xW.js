import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as l,c as r,b as e,a as o,w as d,d as s,e as p}from"./app-BFMpnuEQ.js";const i={},u=e("h1",{id:"跨域资源共享",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#跨域资源共享"},[e("span",null,"跨域资源共享")])],-1),h=e("h2",{id:"1-什么是-cors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#1-什么是-cors"},[e("span",null,"1. 什么是 CORS")])],-1),g=e("strong",null,"跨源资源共享",-1),m=e("sup",{class:"footnote-ref"},[e("a",{href:"#footnote1"},"[1]"),e("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),k=p(`<p>出于安全性，浏览器限制脚本内发起的跨源 HTTP 请求。例如，<code>XMLHttpRequest</code> 和 Fetch API 遵循同源策略。</p><h2 id="2-http-头部" tabindex="-1"><a class="header-anchor" href="#2-http-头部"><span>2. HTTP 头部</span></a></h2><h3 id="21-access-control-allow-origin" tabindex="-1"><a class="header-anchor" href="#21-access-control-allow-origin"><span>2.1 <code>Access-Control-Allow-Origin</code></span></a></h3><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> &lt;origin<span class="token punctuation">&gt;</span> <span class="token punctuation">|</span> *
</code></pre></div><p>其中，<code>origin</code> 参数的值指定了允许访问该资源的外域 URI。对于不需要携带身份凭证的请求，服务器可以指定该字段的值为通配符，表示允许来自所有域的请求。</p><p>例如，下面的字段值将允许来自 <code>https://mozilla.org</code> 的请求：</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mozilla.org
<span class="token key atrule">Vary</span><span class="token punctuation">:</span> Origin
</code></pre></div><p>如果服务端指定了具体的域名而非 <code>*</code>，那么响应首部中的 <code>Vary</code> 字段的值必须包含 <code>Origin</code>。这将告诉客户端：服务器对不同的源站返回不同的内容。</p><h3 id="22-access-control-expose-headers" tabindex="-1"><a class="header-anchor" href="#22-access-control-expose-headers"><span>2.2 <code>Access-Control-Expose-Headers</code></span></a></h3><p>在跨源访问时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code> 方法只能拿到一些最基本的响应头，<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>，如果要访问其他头，则需要服务器设置本响应头。</p><p><code>Access-Control-Expose-Headers</code> 头让服务器把允许浏览器访问的头放入白名单，例如：</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Expose-Headers</span><span class="token punctuation">:</span> X<span class="token punctuation">-</span>My<span class="token punctuation">-</span>Custom<span class="token punctuation">-</span>Header<span class="token punctuation">,</span> X<span class="token punctuation">-</span>Another<span class="token punctuation">-</span>Custom<span class="token punctuation">-</span>Header
</code></pre></div><p>这样浏览器就能够通过 <code>getResponseHeader()</code> 访问 <code>X-My-Custom-Header</code> 和 <code>X-Another-Custom-Header</code> 响应头了。</p><h3 id="23-access-control-max-age" tabindex="-1"><a class="header-anchor" href="#23-access-control-max-age"><span>2.3 <code>Access-Control-Max-Age</code></span></a></h3><p><code>Access-Control-Max-Age</code> 头指定了 Preflight（预检）请求的结果能够被缓存多久。</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Max-Age</span><span class="token punctuation">:</span> &lt;delta<span class="token punctuation">-</span>seconds<span class="token punctuation">&gt;</span>
</code></pre></div><p><code>delta-seconds</code> 参数表示 Preflight 请求的结果在多少秒内有效。</p><h3 id="24-access-control-allow-credentials" tabindex="-1"><a class="header-anchor" href="#24-access-control-allow-credentials"><span>2.4 <code>Access-Control-Allow-Credentials</code></span></a></h3><p><code>Access-Control-Allow-Credentials</code> 头指定了当浏览器的 <code>credentials</code> 设置为 <code>true</code> 时是否允许浏览器读取 <code>response</code> 的内容。当用在对 Preflight 请求的响应中时，它指定了实际的请求是否可以使用 <code>credentials</code>。</p><blockquote><p>请注意：简单 <code>GET</code> 请求不会被预检；如果对此类请求的响应中不包含该字段，这个响应将被忽略掉，并且浏览器也不会将相应内容返回给网页。</p></blockquote><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Allow-Credentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre></div><h3 id="25-access-control-allow-methods" tabindex="-1"><a class="header-anchor" href="#25-access-control-allow-methods"><span>2.5 <code>Access-Control-Allow-Methods</code></span></a></h3><p><code>Access-Control-Allow-Methods</code> 首部字段用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法。</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> &lt;method<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">,</span> &lt;method<span class="token punctuation">&gt;</span><span class="token punctuation">]</span>*
</code></pre></div><p>有关 Preflight 请求的示例已在上方给出。</p><h3 id="26-access-control-allow-headers" tabindex="-1"><a class="header-anchor" href="#26-access-control-allow-headers"><span>2.6 <code>Access-Control-Allow-Headers</code></span></a></h3><p><code>Access-Control-Allow-Headers</code> 首部字段用于预检请求的响应。其指明了实际请求中允许携带的首部字段。</p><div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">Access-Control-Allow-Headers</span><span class="token punctuation">:</span> &lt;field<span class="token punctuation">-</span>name<span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">,</span> &lt;field<span class="token punctuation">-</span>name<span class="token punctuation">&gt;</span><span class="token punctuation">]</span>*
</code></pre></div><hr class="footnotes-sep">`,29),f={class:"footnotes"},C={class:"footnotes-list"},A={id:"footnote1",class:"footnote-item"},y={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},x=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function _(w,v){const n=a("Badge"),t=a("ExternalLinkIcon");return l(),r("div",null,[u,h,e("p",null,[o(n,{type:"tip"},{default:d(()=>[s("定义")]),_:1}),s(),g,s("（CORS）是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它源。"),m]),k,e("section",f,[e("ol",C,[e("li",A,[e("p",null,[s("跨源资源共享（CORS），MDN，"),e("a",y,[s("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS"),o(t)]),s(),x])])])])])}const b=c(i,[["render",_],["__file","cors.html.vue"]]),P=JSON.parse('{"path":"/browser/security/cors.html","title":"跨域资源共享","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 什么是 CORS","slug":"1-什么是-cors","link":"#1-什么是-cors","children":[]},{"level":2,"title":"2. HTTP 头部","slug":"2-http-头部","link":"#2-http-头部","children":[{"level":3,"title":"2.1 Access-Control-Allow-Origin","slug":"21-access-control-allow-origin","link":"#21-access-control-allow-origin","children":[]},{"level":3,"title":"2.2 Access-Control-Expose-Headers","slug":"22-access-control-expose-headers","link":"#22-access-control-expose-headers","children":[]},{"level":3,"title":"2.3 Access-Control-Max-Age","slug":"23-access-control-max-age","link":"#23-access-control-max-age","children":[]},{"level":3,"title":"2.4 Access-Control-Allow-Credentials","slug":"24-access-control-allow-credentials","link":"#24-access-control-allow-credentials","children":[]},{"level":3,"title":"2.5 Access-Control-Allow-Methods","slug":"25-access-control-allow-methods","link":"#25-access-control-allow-methods","children":[]},{"level":3,"title":"2.6 Access-Control-Allow-Headers","slug":"26-access-control-allow-headers","link":"#26-access-control-allow-headers","children":[]}]}],"git":{"createdTime":1711717379000,"updatedTime":1711717379000,"contributors":[{"name":"Sun-ZhenXing","email":"1006925066@qq.com","commits":1}]},"readingTime":{"minutes":2.26,"words":677},"filePathRelative":"browser/security/cors.md","localizedDate":"2024年3月29日","excerpt":"\\n<!-- [[TOC]] -->\\n<h2>1. 什么是 CORS</h2>\\n<p> <strong>跨源资源共享</strong>（CORS）是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它源。<sup class=\\"footnote-ref\\"><a href=\\"#footnote1\\">[1]</a><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\"></a></sup></p><a class=\\"footnote-anchor\\" id=\\"footnote-ref1\\">\\n<p>出于安全性，浏览器限制脚本内发起的跨源 HTTP 请求。例如，<code>XMLHttpRequest</code> 和 Fetch API 遵循同源策略。</p>\\n</a>"}');export{b as comp,P as data};
